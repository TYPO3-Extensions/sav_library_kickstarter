<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<xliff version="1.0">
	<file source-language="en" datatype="plaintext" original="messages" date="2012-08-24T22:18:23Z" product-name="sav_library_kickstarter">
		<header/>
		<body>
			<trans-unit id="General.description" xml:space="preserve">
				<source>General Attributes</source>
			</trans-unit>
			<trans-unit id="General.seeAlso" xml:space="preserve">
				<source>sav_library_kickstarter_all:*,sav_library_kickstarter_functions:*,sav_library_kickstarter_general:*</source>
			</trans-unit>
			<trans-unit id="addEdit = 1;.description" xml:space="preserve">
				<source>When the field is used in an &quot;Update form&quot; view, it will add an input element for update that can be used with the marker ###field_name_Edit### where &quot;field_name&quot; is the name of the field.
See also the help for Form views (showAllItemTemplate) to see how to use markers ###field[field_name, label]###.</source>
			</trans-unit>
			<trans-unit id="addEditIfNull = 1;.description" xml:space="preserve">
				<source>Same as addEdit but the element will be added only if the field is null.</source>
			</trans-unit>
			<trans-unit id="addEditIfAdmin = 1;.description" xml:space="preserve">
				<source>Same as addEdit but the element will be added only if the user has the input right for the plugin.</source>
			</trans-unit>
			<trans-unit id="addLeftIfNotNull = string;.description" xml:space="preserve">
				<source>String will be added to the left if the field value is not null.</source>
			</trans-unit>
			<trans-unit id="addLeftIfNull = string;.description" xml:space="preserve">
				<source>String will be added to the left if the field value is null.</source>
			</trans-unit>
			<trans-unit id="addNewIcon = integer;.description" xml:space="preserve">
				<source>A new icon, will be displayed in front of the field during the number of days given by the integer.</source>
			</trans-unit>
			<trans-unit id="addRighIfNotNull = string;.description" xml:space="preserve">
				<source>String will be added to the right if the field value is not null.</source>
			</trans-unit>
			<trans-unit id="addRighIfNull = string;.description" xml:space="preserve">
				<source>String will be added to the right if the field value is null.</source>
			</trans-unit>
			<trans-unit id="alias = field_name;.description" xml:space="preserve">
				<source>The displayed value will be provided by the fieldname value for the current record.</source>
			</trans-unit>
			<trans-unit id="Classes and styles.description" xml:space="preserve">
				<source>. classLabel = string; The default class &quot;label&quot; associated with the label of the displayed value will be replaced by the string.
. classValue = string; The default class &quot;value&quot; associated with the displayed value will be replaced by the string.
. classHTMLTag = string; The string will be added as a class to the HTML tag associated with the displayed item (not always available).
. styleLabel = string; The string will be added as a style attribute associated with the label of the displayed value.
. styleValue = string; The string will be added as a style attribute associated with the displayed value.
. styleHTMLTag = string; The string will be added as a style attribute to the HTML tag associated with the displayed item (not always available).</source>
			</trans-unit>
			<trans-unit id="cutIfNull=1;.description" xml:space="preserve">
				<source>Cut the field if null.</source>
			</trans-unit>
			<trans-unit id="cutIf=fieldName=value;.description" xml:space="preserve">
				<source>Cuts the field if current value of the field is equal to the given value. The markers ###user### or ###cruser### (same as user but should be used if a new record is created) will be replaced by the user id.
Use EMPTY for the value to test an empty field.</source>
			</trans-unit>
			<trans-unit id="cutIf=fieldName!=value;.description" xml:space="preserve">
				<source>Cuts the field if current value of the field is not equal to the given value.
Same markers as above can be used.</source>
			</trans-unit>
			<trans-unit id="cutIf=###usergroup=group_name###;.description" xml:space="preserve">
				<source>The field is cut if the group name is a valid group for the current user.</source>
			</trans-unit>
			<trans-unit id="cutIf=###usergroup!=group_name###;.description" xml:space="preserve">
				<source>The field is cut if the group &quot;group_name&quot; is not a valid group for the current user.</source>
			</trans-unit>
			<trans-unit id="cutIf=###group=group_name###;.description" xml:space="preserve">
				<source>The field is cut if the group &quot;group_name&quot; is a valid group for the current record. It checks the usergroup field in the local table if any.</source>
			</trans-unit>
			<trans-unit id="cutIf=###group!=group_name###;.description" xml:space="preserve">
				<source>The field is cut if the group name is not a valid group for the current record. It checks the usergroup field in the local table if any.</source>
			</trans-unit>
			<trans-unit id="cutLabel = 1;.description" xml:space="preserve">
				<source>Cuts the label associated with the field.</source>
			</trans-unit>
			<trans-unit id="edit = 0;.description" xml:space="preserve">
				<source>Makes the field not editable in an input form.</source>
			</trans-unit>
			<trans-unit id="edit=1;.description" xml:space="preserve">
				<source>Makes the field editable in an input form.</source>
			</trans-unit>
			<trans-unit id="editAdminPlus=1;.description" xml:space="preserve">
				<source>Makes the field editable in an input form, if the user has the &quot;Admin+&quot; right. To be an &quot;Admin&quot; user, his/her TSConfig must contain a line as follows:
extKey_Admin=value where extKey is the extension key and value is one of the possible value of the &quot;Input Admin Field&quot; defined in the flexform associated with the extension.
The user becomes an &quot;Admin+&quot; user, if his/her TSConfig contains a line as follows:
extKey_Admin=value+</source>
			</trans-unit>
			<trans-unit id="func = function_name;.description" xml:space="preserve">
				<source>See the help associated with functions.</source>
			</trans-unit>
			<trans-unit id="funcAddLeftIfNotNull = string;.description" xml:space="preserve">
				<source>String will be added to the left if the result of the applied function, defined by &quot;func=function_name;&quot; property, is not null.</source>
			</trans-unit>
			<trans-unit id="funcAddLeftIfNull = string;.description" xml:space="preserve">
				<source>String will be added to the left if the result of the applied function, defined by &quot;func=function_name;&quot; property, is null.</source>
			</trans-unit>
			<trans-unit id="funcAddRightIfNotNull = string;.description" xml:space="preserve">
				<source>String will be added to the right if the result of the applied function, defined by &quot;func=function_name;&quot; property, is not null.</source>
			</trans-unit>
			<trans-unit id="funcAddRightIfNull = string;.description" xml:space="preserve">
				<source>String will be added to the right if the result of the applied function, defined by &quot;func=function_name;&quot; property, is null.</source>
			</trans-unit>
			<trans-unit id="fusion = begin;.description" xml:space="preserve">
				<source>Starts the fusion of the fields, that is the following fields will be displayed on the same line.</source>
			</trans-unit>
			<trans-unit id="fusion = end;.description" xml:space="preserve">
				<source>Ends the fusion of the field, that is the following field will be displayed on the next line.</source>
			</trans-unit>
			<trans-unit id="label = string;.description" xml:space="preserve">
				<source>The displayed label will be provided by the string.</source>
			</trans-unit>
			<trans-unit id="mail = 1;.description" xml:space="preserve">
				<source>A mail will be associated with the field.

If the field is a checkbox, it is used as a flag to verify is the mail has to be sent. Mail information are the following:
. fieldForCheckMail=field_name; The mail will be sent if the value of the fieldname for the current row is not null.
. mailIfFieldSetTo=string; The mail will be sent if the value of the fieldname for the current row was previoulsy null or zero and is set to the given string value.
. mailSender=string; mail of the sender. marker ###user_email### will be replaced by the user email.
. mailReceiver=string; mail of the person who will receive the mail and process the information.
. mailReceiverFromField=field_name; The field_name contains the mail of the person who will receive the mail and process the information.
. mailReceiverFromQuery=MySQL_Query; The receiver is obtained from a select query with an alias &quot;value&quot; that will used to retreive the receiver. Example: SELECT email as value from fe_users where ...
. mailSubject=string; subject of the mail. markers ###fieldname### are allowed and will be replaced by their current value.
. mailMessage=string, mail message. markers ###fieldname### are allowed and will be replaced by their current value.
. mailcc=string; if set the string is used as Cc: for the mail.
Localization by means of the file locallang.xml can be used with $$$tag$$$ which will be replaced by its value according to the configuration language.
. mailMessageLanguage=string; This parameter will force the language for the message to the value of the string.
. mailMessageLanguageFromField=fieldname; This parameter will force the language for the message to the value of the field (for example a selector box).</source>
			</trans-unit>
			<trans-unit id="mailAlways = 1;.description" xml:space="preserve">
				<source> (mail must be set to 1)
The mail is always sent when saving. Mail information are the following:
. mailSender=string; mail of the sender. marker ###user_email### will be replaced by the user email.
. mailReceiver=string; mail of the person who will receive the mail and process the information.
. mailReceiverFromField=field_name; The field_name contains the mail of the person who will receive the mail and process the information.
. mailReceiverFromQuery=MySQL_Query; The receiver is obtained from a select query with an alias &quot;value&quot; that will used to retreive the receiver. Example: SELECT email AS value from fe_users WHERE ...
. mailSubject=string; subject of the mail. markers ###fieldname### are allowed and will be replaced by their current value.
. mailMessage=string, mail message. markers ###fieldname### are allowed and will be replaced by their current value.
. mailcc=string; if set the string is used as Cc: for the mail.
Localization by means of the file locallang.xml can be used with $$$tag$$$ which will be replaced by its value according to the configuration language.
. mailMessageLanguage=string; This parameter will force the language for the message to the value of the string.
. mailMessageLanguageFromField=fieldname; This parameter will force the language for the message to the value of the field (for example a selector box).</source>
			</trans-unit>
			<trans-unit id="mailAuto = 1;.description" xml:space="preserve">
				<source> (mail must be set to 1)
The mail is sent when saving if the field is not empty and if one field in the form is changed. Mail information are the following:
. mailSender=string; mail of the sender. The marker ###user_email### will be replaced by the user email.
. mailReceiver=string; mail of the person who will receive the mail and process the information.
. mailReceiverFromField=field_name; The field_name contains the mail of the person who will receive the mail and process the information.
. mailReceiverFromQuery=MySQL_Query; The receiver is obtained from a select query with an alias &quot;value&quot; that will used to retreive the receiver. Example: SELECT email AS value FROM fe_users WHERE ...
. mailSubject=string; subject of the mail. markers ###fieldname### are allowed and will be replaced by their current value.
. mailMessage=string, mail message. markers ###fieldname### are allowed and will be replaced by their current value.
. mailcc=string; if set the string is used as Cc: for the mail.
Localization by means of the file locallang.xml can be used with $$$tag$$$ which will be replaced by its value according to the configuration language.
. mailMessageLanguage=string; This parameter will force the language for the message to the value of the string.
. mailMessageLanguageFromField=fieldname; This parameter will force the language for the message to the value of the field (for example a selector box).</source>
			</trans-unit>
			<trans-unit id="onLabel = 1;.description" xml:space="preserve">
				<source>The value will be displayed in place of the label. Not so useful since the label can be cut.</source>
			</trans-unit>
			<trans-unit id="orderLinkInTitle = 1;.description" xml:space="preserve">
				<source>If this parameter is set, it makes it possible to generate a hyperlink in the title bar of the &quot;list view&quot;.
The hyperlink is asscoiated with the field if the marker ###fieldname### is used in the &quot;Title bar&quot; section. Order clauses have to be defined in the &quot;Where Tags&quot; section of the &quot;Query Form&quot; with &quot;+&quot; and &quot;-&quot; sign added after &quot;fieldname&quot;.
Use for example:
Name: fieldname+,
WHERE Clause:
ORDER BY Clause: tablename.fieldname
Name: fieldname-
WHERE Clause:
ORDER BY Clause: tablename.fieldname DESC</source>
			</trans-unit>
			<trans-unit id="orderLinkInTitleSetup = string;.description" xml:space="preserve">
				<source>This property controls the display of the link when orderLinkInTitle is set. The format is &quot;param1:param2:param3&quot; where &quot;param1&quot; to &quot;param3&quot; can take the following values:
. value: the field value is displayed,
. link: the field value is displayed with a link with toggle the sort,
. asc: an icon is displayed with a link to make an ascending sort,
. desc: an icon is displayed with a link to make a descending sort,
. ascdesc: two icons are displayed with separate links to make an ascending or descending sort,
. if there is no value, nothing is displayed.
The default is &quot;:link:&quot;.</source>
			</trans-unit>
			<trans-unit id="query = SQL statements;.description" xml:space="preserve">
				<source>The query will be executed once the input form data have been saved. Therefore, it can only be used with &quot;input&quot; or &quot;update&quot; views.
Because any query may be executed, for security reason, this property can only be used if an admin user has checked the field &quot;Allow the use of the &quot;query&quot; property&quot; in the advanced folder of the flexform.
It may be useful, for example, to update a specific table when the current data are saved. Several queries can be used in the SQL statements. Each query must be separated using &quot;\;&quot;.
Special markers can be used in the statement :
. ###uid### will be replaced by the current record uid.
. ###CURRENT_PID### will be replaced by the current page uid.
. ###STORAGE_PID### will be replaced by the storage page uid.
. ###user### will be replaced by the user uid.
. ###value### will be replaced by the current value for the field.</source>
			</trans-unit>
			<trans-unit id="queryOnValue = string;.description" xml:space="preserve">
				<source>The query, as defined above, will be executed if the current field value is equal to the right hand side string.</source>
			</trans-unit>
			<trans-unit id="queryForEach = field_name;.description" xml:space="preserve">
				<source>If the field is a true MM relation, the query, as defined above, will be executed for all the record in the relation.
The special marker ###field_name###, where &quot;field_name&quot; is the field where the relation is defined, can be used to identify the record. It will be replaced by the uid of the associated record.</source>
			</trans-unit>
			<trans-unit id="reqValue = SQL SELECT statement;.description" xml:space="preserve">
				<source>SQL SELECT statement must have an alias &quot;value&quot; which will be used as the value to display.
Special markers can be used in the statement :
. ###uid### will be replaced by the current record uid.
. ###uidItem### will be replaced by the uid of the current subform item.
. ###user### will be replaced by the user id.
. ###row[field_name]### where field_name is the name of a field in the current record, will be replaced by its current value.
The following example returns the name of the user who has created the current record, assuming that tx_mytable is the local table:
reqValue= SELECT name AS value
FROM fe_users
WHERE uid=(SELECT cruser_id FROM tx_mytable WHERE uid=###uid###);</source>
			</trans-unit>
			<trans-unit id="setExtendLink = table_name;.description" xml:space="preserve">
				<source>The table name will be left-joined to existing tables</source>
			</trans-unit>
			<trans-unit id="showIf = expression;.description" xml:space="preserve">
				<source>Same as cutIf but show instead of cut.</source>
			</trans-unit>
			<trans-unit id="stdWrapItem = TS syntax;.description" xml:space="preserve">
				<source>It defines a conventional TS stdWrap property. You can add here full TS syntax.
Do not forget that the configuration field is ended by a semi-column, therefore if you need a semi-column in your TS write it &quot;\;&quot; &lt;b&gt;Not available in &quot;basic&quot; type library.&lt;/b&gt;</source>
			</trans-unit>
			<trans-unit id="stdWrapValue = TS syntax;.description" xml:space="preserve">
				<source>It defines a conventional TS stdWrap property. You can add here full TS syntax.
Do not forget that the configuration field is ended by a semi-column, therefore if you need a semi-column in your TS write it &quot;\;&quot;.</source>
			</trans-unit>
			<trans-unit id="tsObject = cObject;.description" xml:space="preserve">
				<source>It defines a TS content object (e.g. TEXT, IMAGE, ...)</source>
			</trans-unit>
			<trans-unit id="tsProperties = string;.description" xml:space="preserve">
				<source>It defines the properties of the TS cObject.
Markers ###fieldName### can be used. The marker will be replaced by the current value of the field.
Localization markers $$$tag$$$ can also be used. The tag will be replaced by its value according to the configuration language.
Do not forget that the configuration field is ended by a semi-column, therefore if you need a semi-column in your TS write it &quot;\;&quot;.</source>
			</trans-unit>
			<trans-unit id="value = string;.description" xml:space="preserve">
				<source>It defines directly the value for the field.</source>
			</trans-unit>
			<trans-unit id="verifier = verifier_name;.description" xml:space="preserve">
				<source>Verifiers can be used to check if a field satisfy a constraint. Each field can have one verifier. Each verifier is associated with a parameter.
Verifiers can be defined by the user. They must be added in the class tx_savlibrary_verifiers defined in the file: class.tx_savlibrary_verifiers.php.

The value &quot;verifier_name&quot; can be :
. isValidPattern
. isValidLength
. isValidInterval
. isValidQuery</source>
			</trans-unit>
			<trans-unit id="verifierMessage = string;.description" xml:space="preserve">
				<source>It replaces the default message.
Localization by means of the file locallang.xml can be used with $$$tag$$$ which will be replaced by its value according to the configuration language.
The marker $$$label[fieldName]$$$ will be replaced by the fieldName title according to the localization.</source>
			</trans-unit>
			<trans-unit id="verifierParam = expression;.description" xml:space="preserve">
				<source>The expression can be :
. a regular expression for the verifier &quot;isValidPattern&quot;.
For example /^[A-Za-z0-9_]*$/ will allow any input which contains letters, numbers or underline characters.
. an integer value for the verifier &quot;isValidLength&quot;.
. an interval [a, b] where a and b are integers for the verifier &quot;isValidInterval&quot;.
. a SELECT query for &quot;isValidQuery&quot;. The marker ###value### in the query will be replaced by the value of the field. The marker ###uid### will be replaced by the uid of the current record.</source>
			</trans-unit>
			<trans-unit id="verifierSetWarning = boolean;.description" xml:space="preserve">
				<source>If set an error detected by the verifier becomes a warning. In that case, the field content is written in the database (which is not the case for errors) and a message is displayed.</source>
			</trans-unit>
			<trans-unit id="wrapItem = string;.description" xml:space="preserve">
				<source>The string will be used to wrap the item. The syntax in the same as in TypoScript.
Localization by means of the file locallang.xml can be used with $$$tag$$$ which will be replaced by its value according to the configuration language.
The marker $$$label[fieldName]$$$ will be replaced by the fieldName title according to the localization.</source>
			</trans-unit>
		</body>
	</file>
</xliff>